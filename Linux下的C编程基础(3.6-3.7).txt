Emacs编译器
  使用说明 C 表示ctrl  M 表示Alt
  C-f 向后移动一个字符
  C-b 向后移动一个字符  
  C-p 移动到上一行
  C-n 移动到下一行
  M-b 向前移动一个单词
  M-f 向后移动一个单词
  C-a 移动到行首
  C-e 移动到行尾
  M-< 移动光标到整个文本的开头
  M-> 移动光标到整个文本的末尾
  Delete 删除光标后的字符
  BackSpace 删除光标前的字符
  剪切文本
  M-Delete 剪切光标前面的单词
  M-d 剪切光标后面的单词
  C-k 剪切从光标位置到行尾的内容
  M-k 剪切从光标位置到句尾的内容
  C-y 粘贴缓冲区内容
  C-x u  先C-x,再u 撤销操作
  复制文本
  C-Space(空格) /C-@ 使表示成一个点，再将光标移动至复制结束点。再按下M-w.
  C-y 粘贴
  
  查找文本：
  C-s 查找光标之后的内容（在下面对话框出现I-search:后输入查找字符串）
  C-r 查找光标以前的内容（在下面对话框出现I-search:后输入查找字符串）
  
  保存文档：C-x C-s 
  退出文档：C-x C-c

GCC 编译器
  Gcc编译器流程解析
  预处理-编译-汇编-链接
     1.预处理
       Gcc -E 1.c -o 1.i 该选项的作用是让Gcc在预处理结束后停止编译过程。
       查看1.i文件就能够看到将1.c内容插入到了1.i中
     2.编译阶段
       Gcc -S 1.c -o 1.s 
      查看后会发现，他已经变成汇编语言了
      pushl  %ebp 前面是指令 后面是目的操作数
     3.汇编阶段
       Gcc -c 1.s -o 1.o 生成的是二进制代码
     4.链接阶段
       函数库：
     Gcc 1.o -o hello 

     运行该文件  ./hello 
 
     普通情况下 就是这种 gcc 1.c   ./a.out 
      
GGC编译选项分析
  -I dir 在头文件的搜索路径列表中添加dir目录
  -L 在库文件的搜索路径列表中添加dir目录
  例子：  
   gcc 1.c -I /dengyangkang/ -o hello3 (.h文件也在当前目录下)
   //注意中间的目录格式
  如有程序hello.c需要到目录“/root/woekplace/lib”下的一个动态库lib.so
  只需要：gcc hello.c -L /root/woekplace/lib - lib.so -o hello_lib 
  2.警告和出错选项
    -ansi 支持符合Ansi标准的C程序
    -pedantic 允许发出ANSIC标准所列出的全部警告信息
    -pedantic-error  允许发出ANSIC标准所列出的全部错误信息
    -w 关闭所有警告
    -Wall 允许发出Gcc提供的所有有用的报警信息
    -werror 把所有报警信息转换为错误i洗脑洗，并在报警发生时停止编译过程
   例子：Gcc -pedantic warning.c -o warning  
  3.优化选项
    -o /o1  /o2 一般建议在调试的时候最好不要优化
  4.体系结构相关选项
    -mcpu=type   
    -mshort 把int类型作为16位处理，相当于short int

Gdb调试器
    编译的时候要用-g编译，否则不包含调试信息。
    例：gcc -g 1.c -o test
    使用 gdb test进入gdb模式
    1.查看文件
      l(list)
       l（小写L）代表 list   b代表breakpoint p代表print  
    2.设置断点
      b  6（行号）(Gdb中利用行号设置断电是指代码运行到对应行之前将其停止
    ，代码运行到第5行之前暂停，并没有运行到第5行)
    3.查看断点情况
     info b
    4.运行代码 r(run)
    5.查看变量值
      p n(变量值)
    6.单行运行
      n(next) /s(step) 区别 若有函数条用的时候，s会进入该函数，而n不会进入
    该函数。
    7.恢复程序运行
     c(continue)
Gdb基本命令
     如果已知命令名 help [command] 
  1.工作环境相关命令
  2.设置断点与回复命令
    delete n(断点号) 删除指定断点
    1.函数断点
      b sum(函数名)，此时的断点实际是在函数的定义处
    2.条件断点
      b  行数或函数名 if 表达式
      b  8  if i==10 (可以在 info b 查看是否次断点成立)
    3.Gdb中源码查看相关命令
    5.Gdb中修改运行行参数相关命令
      在单步执行的过程中，键入命令 “set 变量=设定值”，
     b 7   r   set n=4  c 
  
Make工程管理器
   1.Makefile基本结构
       1.由make工具创建的目标体（target）
       2.目标体所依赖的文件(dependency_file)
       3.创建目标体所需要的命令(command)
     格式：
    target: dependency_file
         command 
     例：首先创建一个Makefile文件，下入以下内容：
     注意：Makefile中每一个command前面必须要有一个"tab"制表符
     hello.o:hello.c hello.h
         gcc -c hello.c -o hello.o
     之后直接用 make hello.o 就可以自动生成hello.o文件
   2.Makefile变量
      基本格式：$(VAR)
      OBJS =kang.o yul.o 自定义变量
      CC  = Gcc          预定义变量
      CFLAGS = -Wall -O -g  预定义变量
      sunq:$(OBJS)
          $(CC) $(CFLAGS) -c kang.c -o kang.o 
      kang.o :kang.c kang.h
          $(CC) $(CFLAGS) -c kang.c -o kang.o
     基本类型：用户自定义变量、预定义变量，自动变量及环境变量。
       常见预定义变量
      CC   C编译器的名称：默认值为cc
      CFLAGS  C编译器的选项，无默认值
     自动变量
        $< 第一个依赖文件的名称
        $@ 目标文件的完整名称
        $^ 所有不重复的依赖文件，以空格分开 
      sunq:$(OBJS)
          $(CC) $^ -o $@ 
       kang.o :kang.c kang.h
          $(CC) $(CFLAGS) -c $^ -o $@ 
    3.Makefile规则
      1.隐式规则 
        sunq:$(OBJS)
          $(CC) $^ -o $@ 
        C编译：.c变为.o
      2.模式规则(相关文件前必须用"%"注明)
        sunq:$(OBJS)
          $(CC) $^ -o $@ 
       %.o : %.c
          $(CC) $(CFLAGS) -c $^ -o $@ 
     4.Make管理器的使用
3.7 使用autotools
    1.autoscan (会自动生成configure.scan文件，configure.scan文件)
      修改configure.scan文件，参照 http://blog.csdn.net/zhoudaxia/article/details/4361194
    并重命名为 configure.ac  
    
     注意：书中AM_INIT_AUTOMAKE(mytool,0.1)  
       而不是AC_INIT_AUTOMAKE(mytool,0.1)  
    
    2.autoconf 
       首先运行aclocal,生成一个aclocal.m4文件，主要处理本地宏定义。
       再运行autoconf，生成configure可执行文件 还有aclocal.m4，autom4te.cache
    3.autoheader
       负责生成config.h.in文件。
    4.automake 
         自己创建Makefile.am文件，加入以下内容
         AUTOMAKE_OPTIONS=foreign 设置软件等级，foreign
         bin_PROGRAMS= hello    定义要产生的文件名
         hello_SOURCES= hello.c 定义|"hello"这个执行程序所需要的原始文件。
     注意：如果有必须要的源文件 hello.h   
          hello_SOURCES= hello.c  hello.h (后面必须加进来)
       automake --add-missing 
        如果上面命令报错：automake requires `AM_CONFIG_HEADER', not `AC_CONFIG_HEADER
    是automake版本问题，讲AC_CONFIG_HEADER([config.h])”修改为“AM_CONFIG_HEADER([config.h])”
   5.运行configure,
        ./configure
   
  使用autotools所生成的Makefile
    1.直接make 会自动生成 hello文件 ./hello 调试就可以出来了
    2.make install 
      会直接把程序按照到系统目录中去，结果是 直接敲hello 也会出来程序打印信息。
    3.make clean 
      会清除之前编译的可执行文件及目标文件
    4.make dist
      将程序和相关文档打包一个压缩文档发布

安装软件 
   压缩 make dist 
   解压 tar-zxvf hello-1.0.tar.gz
   进入压缩文件 
   ./configure
   make 
   ./hello
   make install 
   hello 


































